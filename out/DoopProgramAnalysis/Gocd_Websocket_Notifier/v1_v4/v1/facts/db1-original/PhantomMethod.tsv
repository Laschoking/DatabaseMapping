<com.thoughtworks.go.plugin.api.logging.Logger: com.thoughtworks.go.plugin.api.logging.Logger getLoggerFor(java.lang.Class)>
<com.thoughtworks.go.plugin.api.request.GoPluginApiRequest: java.lang.String requestName()>
<com.thoughtworks.go.plugin.api.request.GoPluginApiRequest: java.lang.String requestBody()>
<com.thoughtworks.go.plugin.api.logging.Logger: void info(java.lang.String)>
<com.thoughtworks.go.plugin.api.response.GoPluginApiResponse: void <init>()>
<org.java_websocket.server.WebSocketServer: void <init>(java.net.InetSocketAddress)>
<org.java_websocket.handshake.ClientHandshake: java.lang.String getResourceDescriptor()>
<org.java_websocket.WebSocket: java.net.InetSocketAddress getRemoteSocketAddress()>
<org.java_websocket.server.WebSocketServer: java.util.Collection connections()>
<org.java_websocket.WebSocket: void send(java.lang.String)>
<org.java_websocket.server.WebSocketServer: void start()>
<org.java_websocket.server.WebSocketServer: int getPort()>
<com.thoughtworks.go.plugin.api.logging.Logger: void error(java.lang.String,java.lang.Throwable)>
<com.thoughtworks.go.plugin.api.GoPluginIdentifier: void <init>(java.lang.String,java.util.List)>
<com.google.gson.GsonBuilder: void <init>()>
<com.google.gson.GsonBuilder: com.google.gson.Gson create()>
<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>
