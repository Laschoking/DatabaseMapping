<org.springframework.boot.loader.nio.file.NestedByteChannel$Resources: void releaseAll()>/if/0	==
<org.springframework.boot.loader.nio.file.NestedByteChannel$Resources: void releaseAll()>/if/1	==
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/assign/3	-
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/assign/8	+
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/assign/10	+
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/if/0	>
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/if/1	<=
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/if/1	<=
<org.springframework.boot.loader.zip.VirtualZipDataBlock$DataPart: int read(java.nio.ByteBuffer,long)>/if/2	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getNestedJarUrl(org.springframework.boot.loader.launch.JarFileArchive$JarArchiveEntry)>/if/0	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getNestedJarUrl(org.springframework.boot.loader.launch.JarFileArchive$JarArchiveEntry)>/if/1	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/assign/5	+
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/assign/14	cmp
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/if/0	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/if/0	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/if/1	==
<org.springframework.boot.loader.launch.JarFileArchive: java.net.URL getUnpackedNestedJarUrl(java.util.jar.JarEntry)>/if/2	==
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.Path getTempUnpackDirectory()>/if/0	==
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.Path getTempUnpackDirectory()>/if/1	!=
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.Path getTempUnpackDirectory()>/if/1	!=
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.Path createUnpackDirectory(java.nio.file.Path)>/assign/10	+
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.Path createUnpackDirectory(java.nio.file.Path)>/if/0	>=
<org.springframework.boot.loader.launch.JarFileArchive: void unpack(java.util.jar.JarEntry,java.nio.file.Path)>/if/0	==
<org.springframework.boot.loader.launch.JarFileArchive: void unpack(java.util.jar.JarEntry,java.nio.file.Path)>/if/1	==
<org.springframework.boot.loader.launch.JarFileArchive: java.nio.file.attribute.FileAttribute[] getFileAttributes(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>/if/0	!=
<org.springframework.boot.loader.jar.NestedJarFile$RawZipDataInputStream: void close()>/if/0	==
<org.springframework.boot.loader.zip.ByteArrayDataBlock: long size()>/assign/1	len
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/assign/4	len
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/assign/5	-
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/0	<=
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/0	<=
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/0	<=
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/1	<=
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/1	<=
<org.springframework.boot.loader.zip.ByteArrayDataBlock: int read(java.nio.ByteBuffer,int)>/if/1	<=
<org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord: long size()>/assign/2	+
<org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord: long size()>/assign/4	+
<org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord: org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord load(org.springframework.boot.loader.zip.DataBlock,long)>/if/0	==
