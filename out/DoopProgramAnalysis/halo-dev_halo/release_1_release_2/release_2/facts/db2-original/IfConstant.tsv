<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String canonicalizeAfter(java.lang.String,int)>/if/2	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String canonicalizeAfter(java.lang.String,int)>/if/3	2	46
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeEmbeddedSlashDotDotSlash(java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeEmbeddedSlashDotDotSlash(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeEmbeddedSlashDotSlash(java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeTrailingSlashDot(java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeTrailingSlashDotDot(java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Canonicalizer: java.lang.String removeTrailingSlashDotDot(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: void installZipFileSystemIfNecessary(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: void installZipFileSystemIfNecessary(java.lang.String)>/if/2	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: java.util.jar.JarFile createJarFile(java.net.URL,java.util.function.Consumer)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: java.util.jar.JarFile createJarFile(java.net.URL,java.util.function.Consumer)>/if/1	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: boolean isCreatingNewFileSystem()>/if/2	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: java.lang.Runtime$Version getVersion(java.net.URL)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: boolean isLocalFileUrl(java.net.URL)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: boolean isLocalFileUrl(java.net.URL)>/if/1	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: boolean isLocal(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: boolean isLocal(java.lang.String)>/if/2	2	0
<org.springframework.boot.loader.net.protocol.jar.UrlJarFileFactory: boolean isLocal(java.lang.String)>/if/3	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: void close()>/if/0	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: boolean isOpen()>/if/0	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>/if/0	2	0
<org.springframework.boot.loader.nio.file.NestedFileSystem: void assertNotClosed()>/if/0	2	0
<org.springframework.boot.loader.launch.SystemPropertyUtils: java.lang.String parseStringValue(java.util.Properties,java.lang.String,java.lang.String,java.util.Set)>/if/2	2	0
<org.springframework.boot.loader.launch.SystemPropertyUtils: int findPlaceholderEndIndex(java.lang.CharSequence,int)>/if/1	2	0
<org.springframework.boot.loader.launch.SystemPropertyUtils: int findPlaceholderEndIndex(java.lang.CharSequence,int)>/if/2	2	0
<org.springframework.boot.loader.launch.SystemPropertyUtils: int findPlaceholderEndIndex(java.lang.CharSequence,int)>/if/3	2	0
<org.springframework.boot.loader.launch.WarLauncher: boolean isLibraryFileOrClassesDirectory(org.springframework.boot.loader.launch.Archive$Entry)>/if/0	2	0
<org.springframework.boot.loader.launch.WarLauncher: boolean isLibraryFileOrClassesDirectory(org.springframework.boot.loader.launch.Archive$Entry)>/if/1	2	0
<org.springframework.boot.loader.launch.WarLauncher: boolean isLibraryFileOrClassesDirectory(org.springframework.boot.loader.launch.Archive$Entry)>/if/2	2	0
<org.springframework.boot.loader.launch.Launcher: void launch(java.lang.String[])>/if/0	2	0
<org.springframework.boot.loader.launch.Launcher: void launch(java.lang.String[])>/if/1	2	0
<org.springframework.boot.loader.launch.Launcher: boolean hasLength(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.net.util.UrlDecoder: java.lang.String decode(java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.util.UrlDecoder: java.lang.String decode(java.lang.String)>/if/1	2	0
<org.springframework.boot.loader.net.util.UrlDecoder: java.lang.String decode(java.lang.String)>/if/3	2	37
<org.springframework.boot.loader.launch.Launcher: boolean isExploded()>/if/1	2	0
<org.springframework.boot.loader.net.util.UrlDecoder: int fillByteBuffer(java.nio.ByteBuffer,java.lang.String,int,int)>/if/1	2	37
<org.springframework.boot.loader.net.util.UrlDecoder: int fillByteBuffer(java.nio.ByteBuffer,java.lang.String,int,int)>/if/1	2	37
<org.springframework.boot.loader.net.protocol.jar.JarUrlConnection$ConnectionInputStream: void close()>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.JarUrlConnection$ConnectionInputStream: void close()>/if/1	2	0
<org.springframework.boot.loader.net.util.UrlDecoder: void assertNoError(java.nio.charset.CoderResult)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: void parseURL(java.net.URL,java.lang.String,int,int)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: java.lang.String extractPath(java.net.URL,java.lang.String,int,int,int)>/if/1	2	4
<org.springframework.boot.loader.net.protocol.jar.Handler: java.lang.String extractPath(java.net.URL,java.lang.String,int,int,int)>/if/2	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: java.lang.String extractContextPath(java.net.URL,java.lang.String,int)>/if/0	2	0
<org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord: org.springframework.boot.loader.zip.ZipLocalFileHeaderRecord load(org.springframework.boot.loader.zip.DataBlock,long)>/if/0	2	67324752
<org.springframework.boot.loader.net.protocol.jar.Handler: void assertInnerUrlIsNotMalformed(java.lang.String,java.lang.String)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: boolean sameFile(java.net.URL,java.net.URL)>/if/0	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: boolean sameFile(java.net.URL,java.net.URL)>/if/1	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: boolean sameFile(java.net.URL,java.net.URL)>/if/4	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: boolean sameFile(java.net.URL,java.net.URL)>/if/5	2	0
<org.springframework.boot.loader.net.protocol.jar.Handler: int indexOfSeparator(java.lang.String,int,int)>/if/1	2	33
<org.springframework.boot.loader.net.protocol.jar.Handler: int indexOfSeparator(java.lang.String,int,int)>/if/3	2	47
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: long size()>/if/0	2	0
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: byte[] asByteArray()>/if/0	2	0
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: org.springframework.boot.loader.zip.ZipDataDescriptorRecord load(org.springframework.boot.loader.zip.DataBlock,long)>/if/0	2	134695760
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: org.springframework.boot.loader.zip.ZipDataDescriptorRecord load(org.springframework.boot.loader.zip.DataBlock,long)>/if/1	2	0
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: org.springframework.boot.loader.zip.ZipDataDescriptorRecord load(org.springframework.boot.loader.zip.DataBlock,long)>/if/2	2	0
<org.springframework.boot.loader.zip.ZipDataDescriptorRecord: boolean isPresentBasedOnFlag(int)>/if/0	2	0
