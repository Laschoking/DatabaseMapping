<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes[] values()>	values
<simplejavacalculator.Calculator$BiOperatorModes: simplejavacalculator.Calculator$BiOperatorModes valueOf(java.lang.String)>	valueOf
<simplejavacalculator.Calculator$BiOperatorModes: void <init>(java.lang.String,int)>	<init>
<simplejavacalculator.Calculator$BiOperatorModes: void <clinit>()>	<clinit>
<simplejavacalculator.BufferedImageCustom: void <init>()>	<init>
<simplejavacalculator.BufferedImageCustom: java.awt.Image imageReturn()>	imageReturn
<simplejavacalculator.SimpleJavaCalculator: void <init>()>	<init>
<simplejavacalculator.SimpleJavaCalculator: void main(java.lang.String[])>	main
<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes[] values()>	values
<simplejavacalculator.Calculator$MonoOperatorModes: simplejavacalculator.Calculator$MonoOperatorModes valueOf(java.lang.String)>	valueOf
<simplejavacalculator.Calculator$MonoOperatorModes: void <init>(java.lang.String,int)>	<init>
<simplejavacalculator.Calculator$MonoOperatorModes: void <clinit>()>	<clinit>
<simplejavacalculator.UI: void <init>()>	<init>
<simplejavacalculator.UI: void init()>	init
<simplejavacalculator.UI: void actionPerformed(java.awt.event.ActionEvent)>	actionPerformed
<simplejavacalculator.UI: void parsetoBinary()>	parsetoBinary
<simplejavacalculator.UI: java.lang.Double reader()>	reader
<simplejavacalculator.UI: void writer(java.lang.Double)>	writer
<simplejavacalculator.Calculator: void <init>()>	<init>
<simplejavacalculator.Calculator: java.lang.Double calculateBiImpl()>	calculateBiImpl
<simplejavacalculator.Calculator: java.lang.Double calculateBi(simplejavacalculator.Calculator$BiOperatorModes,java.lang.Double)>	calculateBi
<simplejavacalculator.Calculator: java.lang.Double calculateEqual(java.lang.Double)>	calculateEqual
<simplejavacalculator.Calculator: java.lang.Double reset()>	reset
<simplejavacalculator.Calculator: java.lang.Double calculateMono(simplejavacalculator.Calculator$MonoOperatorModes,java.lang.Double)>	calculateMono
